<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>test</title>
    <link href="/20/"/>
    <url>/20/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4f9a8a918803fda27c4f2b3c55c546ee8842a72b3aa9ee38e0313f72a69ad479">34cb8e0f4ceed70e9b0a3160fb90b7dabfadff65ff55cb72f8c90003b1d0cb27d8d558011700f72e5ab5f5bd30766aa4bbf9d8467e5e5f2812f82aee0773051a84869b8fc2acc733c8f0f347047cd703e359e9aa1f3126b0bc86ba0b4079d8b9d4bae78dd551ab66bd4528eb6534e2489d42bd3a9b2a1c6570d0ab31aa0e0831d2d22f35f88dcdb0120a716e6add35822b37eccd4530746b6c05194e8e97a84252bdc7d4dccfdb4cb6504a339faa5fd9149ed7c764514936445d2b75eaba59685bdcf0eedac689421b1a36c24317ebbf76394e9223b1d9fdcc08c635ea67901359d780889146da01c36e96116cc16799fe64dde32fa0d8d2ad48ee219e7e8f7f8dfe8fcaa587dab5c5a9c221958751d8ee08e59fbf15b809cd8bc41f57299d1bb3c038bf9c03555931be66c35eb15af099be553c9d983f5ac629e7f281a81f32185fbd6384c355cf40a536d3c18a9261d2912345051845f55d5058728621c784d0d864dc2a314d62d58fbba4851578b2f64779585dac6cde4e130f140df88dda70e9d64d2006bf2bdf0ed84070d5b6853d08ac891df80741d901c650af83807492b6a355abbd33979e95b7b2aaca564ccdf1a601817c746013813054ede5f5e70daaf2d69641a5cbb7e85eab3f6d011e7b0ecedcdcdf0e3aa973d8a245ad5a9da55c4d73a4a58b79c637d974fa1cb52f04b64bb61a44c8dc5fb3b27c2fd759088cda664685bb6219d79d704df9d4968ee89f7c7167e9efc960de88ad8c805ded6b1f156e62ccbdbcc5e7e72450579a1619de26283aed088383c8156319743969ae52aa919bd85bbe0c20f025e540dba2e67e7c38b972d700283c81e96c489c059d08de4542b631b8de2f2622b67cb57fc2827c4719c5187f46e20b5f9d379d739de725923bad7573fb03720280af6210425dec030bf3b94ae835006dd3a49f0c4f13e74681bcc638a75ac452c66d60d6207754972f7b4eda37fd5996ad01c0e0c22daf88e93901a8e703f2a16d96f71281b2fffac2e904b21f3db0143ae3014c65b3d71499be0b735fe91dc8f0cf63d81993b00e5a72ae5f499af63c5e0b4de0c61978cff681afe63d955c309cdd03baf2d7e68d2cf91e4f55e166d2414c943d586d868061206035d60f80163fc056bd70d272313d7c77e22210b97252969d762dc3ec0cf885194784346807bb16c3ad111de0cbe9a4824d27c76e8a678214a73d1a882fe3e191ea6c25bd233f28900dea0bb98b3069c647fcaf4290caaf0a45e30569a081c9071d650cf43cb981287fcb9898dbb186cffeb823de6c9cc9a3d71f9e942bf39515ac01c52f562ef8adeed4d8cbe709e56d089500d7cb974b96cd401a78e127d84178c7f2945cffcdeff2fa9038ae28e9fa5c4f4002e30d7ae09e4ca0b9834127a58a84ec2e5c265ccf130139a1cfad45d390e128b67b11d5c6fe60e70a80ecdd42484e302b7bf270e3ee1f7f18150af84d8f5df2552c9bc51d0558a2073f4bdf0c8fab24cb9c756bbd2c17cbcd474367c0bfa5f3d93856de39f9a39e1e30ac3fccf75a0d40a5eee0dd8b7daf11d9915004fd5658b4013ba14d7aea6688b2f45379ba487f2cbb767c77d6af71ba5a977eae5b51df82088879d8e65653531b9d3cf50ecff5b85e6f757a883463d08e6f497505fc7c1a78f041acf58bead459c9ebf4522b01a56efd0b17ad5e4a06fa58e510a49eb2751f2638d0e9428d6ccd3a910cc1e98530bf07638010b288cc738d67d75744788dafc284a78825cdc06244b9b03c5083f0a99f074cf9a09361146b302f497fd86e6d75081fdcfdde5fa0221455d8baa5136b5d054874924c1de595e6e8af5564a187ebd19a5195946e1ecc20cb0e96e0f3197ee57f19caa88109bdb8ccc4a32f0a068ef12eb138b9b487da5c78dd28d86bbf1b96648a7b672f2a3832f004eecf5eed10407cddbc04e6691bdb345dd40e6a6357c0c27e771d41cdf5fb1900eb15787744732f3aff25a58a9f6385c37a2b639842094019b7cc176d86cf9e84d6873633920fde298bfff3c116677ed7597516365d20a4c6c1d54817cc428e9d6c93f87a6dacb0d28caecb229e8cf4671f26c180946273164592a2a93224a1367547ce659d09a8c3807380eb0bb622a43f562084f598e29b8a01c7d6455534cf0336f860aba6f74b0b47190ebe04ee5d115fc21c0511a486c26da85679780abf9247e45eaef01e928811c9535658289d6ded106d8890ebd5876cbe1bd75b6c7b4d4729a454b53ab4b3c833626ae3a8ee98931fb6f34dd43e19a5b7996f1b96031c294e6708ea6136e14da52bc1f9bee0a9795200ec6c02fd0e55d3a30b1fe2f46d2741c589235c925fee001b45aacadcbc12bdd1339cf1b73d9d80acf94074cdfbe1c8cffdb00748990054585b8d84e964bd181e3ec687b365cb2f9754ea5593e4d9d6d811c58471</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这里需要密码才能访问。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>认知水平低的人，再努力也没用</title>
    <link href="/2004/"/>
    <url>/2004/</url>
    
    <content type="html"><![CDATA[<h1 id="认知水平低的人，再努力也没用"><a href="#认知水平低的人，再努力也没用" class="headerlink" title="认知水平低的人，再努力也没用"></a>认知水平低的人，再努力也没用</h1><p>前几天重温电影《1942》，里面一句对白让我很是震撼。</p><p>财主范殿元在家破人亡时，对着自家长工说了这样一句话：</p><p>“等我到了陕西，立住了脚，那就好办了。</p><p>我知道怎么从一个穷人变成财主，不出十年，你大爷我还是东家。”</p><p>长工拴柱说：“好啊，东家，我到时候还给你当长工！”</p><p>同样是一穷二白，十年后，财主仍旧是财主，而长工无论怎么努力，到头来依旧是长工。</p><p>其实很多时候就是这样，思想决定行动，行动决定命运。</p><p>一个人的认知如果永远停留在脚下，不往高处看，无论走了多远的路，都只能是原地打转。</p><p>20世纪90年代，美国社会学家芭芭拉为了搞明白美国底层穷人，能否通过辛勤劳动摆脱自己的命运，做了一个社会实验。</p><p>她和所有朋友断绝联系，化身普通的劳动女工，深入美国社会底层，终日和那些一直在温饱线上徘徊的工人生活在一起。</p><p>在接触了各种社会背景的低薪群体之后，她得出了结论：几乎不可能。</p><p>她说，很多人之所以一直呆在社会底层，不是社会的迫害，而是认知水平受限。</p><p>芭芭拉举了这样一个例子。</p><p>实验期间她遇到一个女服务员盖尔，盖尔每天的收入约40–50美金。</p><p>而她所住的临时旅馆，每天房租是40美金，且需要日结。</p><p>这也就意味着，她交完房租后，只能勉强维持生计。</p><p>芭芭拉很奇怪，问她为什么不去租一间更加便宜的公寓。</p><p>按月租的话，每个月能省下不少钱，久而久之，可以用这笔钱去学一门技术，掌握更多的知识，从而找到收入更高的工作，改善自己的财务状况。</p><p>女同事听完之后翻了个白眼说：</p><p>“租公寓要先交一个月的定金，少说也要1000美金，我上哪去弄那么多的钱去？”</p><p>其实，对于一个成年人来说，无论是储蓄还是去借款，1000美元都不是一个遥不可及的天文数字，但盖尔不愿意做出改变，也不愿意承受任何风险，只能困守当下。</p><p>心理学上有个概念叫：管窥效应。</p><p>当一个人的眼睛，只能通过一根管子看东西，那么他只能看到管子里面的东西。</p><p>就像故事中的盖尔，她的视线中，只有捉襟见肘的日薪，即便有无数改变现状的方法，她也无法看到。</p><p>最后的结果就是，每天用交完房租剩下的钱填饱肚子，日复一日既不安于现状，又觉得无力改变，只能得过且过。</p><p>哲学家叔本华说：“世界上最大的监狱，是人的思维意识。”</p><p>真正能限制一个人的，从来不是经济上的贫穷，而是认知上的困顿。</p><p>爱因斯坦说过这么一段话：</p><p>“如果给我1个小时解答一道决定我生死的问题，我会花55分钟来弄清楚这道题到底是在问什么。”</p><p>一旦清楚了它到底在问什么，剩下的5分钟足够回答这个问题。</p><p>努力很重要，怎么强调都不为过，但没有方向的努力是无头苍蝇，没有思考的勤奋会是四处碰壁。</p><p>看过这样一个故事。</p><p>一条路边有两个花园。</p><p>其中一个花园一片荒芜、杂草丛生；另一个花园花草繁茂，鸟语花香，一片勃勃生机。</p><p>花园里两个园丁的状态也迥然不同。</p><p>第一个花园里的园丁，一边拔除杂草，一边咒骂着，累得满头大汗。</p><p>而第二个园丁好像毫不费力，此刻正悠闲地躺在一棵树下，悠闲地哼着小曲。</p><p>为什么同样的环境和努力下，花园差别会这么大呢？</p><p>原来，漂亮花园的园丁最早也在不停地除草，兢兢业业，一刻也不得闲。</p><p>但后来他发现，无论他再怎么辛苦地拔，杂草都拔不完，等他处理完一边的杂草，另一边的又长起来了。</p><p>于是，他想到了一个好主意，他去市场上找到一些比杂草生长速度更快的花草植物。</p><p>这些植物生长起来，很快就挤占了杂草的生长空间。</p><p>从此，他再也不需要为杂草烦恼了，过起了悠闲的生活。</p><p>同样面对困扰，第一个园丁费了九牛二虎之力，仍未解决问题，而第二个园丁，勤于思考，找到问题的本质，不费吹灰之力，药到病除。</p><p>《让你的时间更有价值》一书中，提到了“低水平勤奋”与“高水平勤奋”的区别。</p><p>低水平的勤奋者，就如同下面这张图里，往返运送货物的人，忙于简单重复的运输，却从未低头看看脚下的轮子。</p><p>而高水平的勤奋者，可以通过思维的升级，方法的转变，工具的辅助，以同样的努力取得倍数的回报。</p><p>思考不到位，所谓的勤奋都是扯淡；认知不到位，所谓的努力都是白费。</p><p>只有真正有效的勤奋，才能带来真正有效的成长。</p><p>石油大王洛克菲勒曾在给儿子的信中写道：每个人都是他自己命运的设计师和铸造者。</p><p>很多事情光靠努力是不够的，导致人与人之间最大的差别是认知，拉开人与人之间差距的根本是思维。</p><p>雷军曾向晨兴资本的刘芹讨教投资问题。</p><p>“我一直认为你做投资是有自己的独到之处，你能告诉我，你成功的秘诀是什么吗？”</p><p>刘芹回答：</p><p>“我相信天道一定能酬勤，如果勤奋的话，你一定能做一个非常好的投资者。”</p><p>刘芹本以为这个答案至少能得到雷军的部分认同，但雷军当即反驳说：“天道不一定酬勤。”</p><p>几乎所有认识雷军的人，对他都有一个相同的评价：勤奋。</p><p>雷军曾是名校毕业学霸，在金山工作时，每天只睡四五个小时，十年如一日，被称为“中关村劳模”。 </p><p>然而他的聪明勤奋并没有换来相应的成功。</p><p>微软迅速发展，他所在的金山公司，发展缓慢，当时比他晚出道的马云，已经狠狠地把他甩在身后。</p><p>他痛定思痛，辞掉金山总经理的职位，当他从忙碌的工作中抽身出来时，才看到新浪、网易、搜狐等一大批互联网公司迅速崛起。</p><p>那时，他深刻地认识到，他不是输在了勤奋上，而是输在了战略上。</p><p>如果没有认知的转变，雷军可能现在还是那个在中关村夜以继日工作的“打工人”。</p><p>回顾这段经历，他颇为感慨地说：永远不要用战术上的勤奋，掩盖战略上的懒惰。</p><p>现在这个社会，人与人之间的比拼，不再是努力程度的较量，更多的是对事情的理解和对行业的洞察。</p><p>猎豹CEO傅盛曾经说：“认知，几乎是人和人之间唯一的本质差别。”</p><p>那么如何提高自己的认知水平呢？三个建议送给你。</p><ul><li><ol><li>博观而约取，厚积而薄发。</li></ol></li></ul><p>想让思维发生质变飞跃，知识储备作为量变就是必不可少的。</p><p>而帮助我们拓展知识库的方法，无非两种，如果不能行万里路，那就读万卷书。</p><p>苏轼有句名言：博观而约取，厚积而薄发。</p><p>“博观”，就是广泛涉猎，大量阅读，“约取”，则是一个去芜存菁、去伪存真的过程。</p><p>只有当你大脑中存的知识足够多、足够深刻的时候，才能和世界碰撞出火花，从而形成“厚积薄发”的思维跃迁。</p><ul><li><ol start="2"><li>心怀敬畏，保持空杯。</li></ol></li></ul><p>一个人知道得越多，越会觉得自己所知甚少，不知道的东西更多。</p><p>就像海面上的冰山一样，已知的永远是一小部分，未知的才是海面下看不见的冰山。</p><p>所谓的成长就是保持高度敏感，对新事物永远保持开放的心态。</p><p>大量吸收新的知识，向外探寻，向内思考，不断打破自己，升级自己。</p><ul><li><ol start="3"><li>历事炼心，知行合一。</li></ol></li></ul><p>纸上得来终觉浅，绝知此事要躬行。</p><p>知识如果不实践，永远无法内化成自己的认知，只有敢于行动，去经历，去体验，才能形成自己的理解。</p><p>古人说历事炼心，从事上悟理，在理上改行，长此以往，才能实践出真知。</p><p>（摘自网络）</p><p><img src="https://harrycatt.github.io/pic/dianzan.jpg" alt="点赞支持一下吧！"><br><img src="https://harrycatt.github.io/pic/dianzan.jpg" width="50%" height="50%"></p>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
      <tag>努力</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>奥运背后隐藏的6个人生真相</title>
    <link href="/2003/"/>
    <url>/2003/</url>
    
    <content type="html"><![CDATA[<h1 id="奥运背后隐藏的6个人生真相"><a href="#奥运背后隐藏的6个人生真相" class="headerlink" title="奥运背后隐藏的6个人生真相"></a>奥运背后隐藏的6个人生真相</h1><ul><li>昨晚，为期半个多月的东京奥运会落下帷幕。</li><li>四年一届的奥运会，汇聚了来自世界各国最顶尖的体育健儿。</li><li>同场竞技，他们不仅为我们奉献了一场场精彩的比赛，还有许多令人感动的场外故事。</li><li>荣誉背后有汗水，笑容背后有伤痛。</li><li>回顾这段关注奥运热血沸腾，笑泪交加的日子，从这些运动员身上，我看清了关于人生的6个道理。</li></ul><hr><h2 id="人不可能一直赢，但是要永不言败"><a href="#人不可能一直赢，但是要永不言败" class="headerlink" title="人不可能一直赢，但是要永不言败"></a>人不可能一直赢，但是要永不言败</h2><p>在中国运动历史上，有一支队伍堪称传奇，那就是中国女排。</p><p>8月2日，中国女排以3:0击败阿根廷队获得两连胜后，带着些许遗憾告别了本届东京奥运会。</p><p>赛后，郎平和每一名队员拥抱，女排姑娘集体鞠躬致谢</p><p>由于前几次的比赛失利，无缘进入决赛，但她们虽败犹荣。</p><p>女排姑娘们在输了比赛之后，没有萎靡不振，而是迅速调整自己的心态。</p><p>牢牢抓住每一个接球的机会，准备随时逆风翻盘。</p><p>这种不服输，不言败的精神最让人敬佩。</p><p>正如郎平教练所说：</p><blockquote><p>“无论输赢都要昂首离开，女排精神不是每一场都要赢，而是知道不会赢却倾尽全力，继续坚持。”</p></blockquote><p>没有人能一直赢，但只要并不放弃就有赢的可能。</p><p>生活亦是如此，唯有扛住外界的压力，成为精神的强者时，便能实现从内到外的成长。</p><p>曾在知乎上看到一个问题：“什么是真正的强者。”</p><p>高赞回答是：</p><blockquote><p>“真正的强者，不是输不起的人，也不是一直赢的人，而是含泪奔跑不认输的人。”</p></blockquote><p>一时的输赢不能决定一世的输赢。</p><p>人输了不可怕，可怕的是没有从头再来的勇气。</p><p>永不言败的人，一直走在去往成功的路上。</p><h2 id="没有横空出世的运气，只有不为人知的努力"><a href="#没有横空出世的运气，只有不为人知的努力" class="headerlink" title="没有横空出世的运气，只有不为人知的努力"></a>没有横空出世的运气，只有不为人知的努力</h2><p>他被称为本届奥运“最苦冠军”，他就是举重运动员谌利军。</p><p>他在落后对方11公斤，被认为夺冠无望的情况下，决定放手一搏，直接加重12公斤。</p><p>这对每次都缓缓增加重量的举重运动员来说是非常大的跨度，不禁让人为他捏一把汗。</p><p>当所有人的目光聚集到他身上时，只见他大吼一声，奋力一举，硬生生把几百斤杠铃举过头顶，并稳稳站定。</p><p>直到看到裁判亮灯，他才松了一口气。</p><p>这就是中国力量，正如谌利军的一条微博所说：“逆风翻盘，我命由我不由天。”</p><p>然而，“一举成名”天下知的背后有着旁人不能体会的辛酸。</p><p>出身贫寒，10岁就被选入体校后就开始练习举重。</p><p>训练期间，父亲叔叔患重病，母亲一人挣钱，面对这样的困境，他咬咬牙，暗下决心，一定要赢一次，为此他一遍遍苦练。</p><p>一路过关斩将，走到今天，赢得奖牌，他用了整整十八年。</p><p>《时间之书》里有句话说的好：</p><blockquote><p>“你的职责是耕种土地而不是焦虑当下，你在三四月播种，七八月自有收获。”</p></blockquote><p>所有的一鸣惊人都是坚持不懈努力的结果。</p><p>万事功到自然成，愿我们都能沉下心来，潜心耕种，埋头苦干的人，都会等到属于自己的收获季。</p><h2 id="人生没有绝对的公平，我们可以用努力消除不公"><a href="#人生没有绝对的公平，我们可以用努力消除不公" class="headerlink" title="人生没有绝对的公平，我们可以用努力消除不公"></a>人生没有绝对的公平，我们可以用努力消除不公</h2><p>本届奥运会，最令网友意难平的比赛，就是男子体操比赛。</p><p>此次比赛中，日本选手桥本大辉在一只脚出界的情况下，仅被裁判扣0.1分，获得金牌；</p><p>中国选手肖若腾完美落地，却被裁判扣了0.3分，最后摘银。</p><p>裁判解释称扣除0.3分，是因为单杠项目结束后没有向他们示意。</p><p>随后，关于裁判评分不公正的话题迅速登上微博热搜。</p><p>正如中国体操队副领队叶振南在接受《人民日报》采访时所说：</p><blockquote><p>“今天从发挥来说，每一项都是发挥得很出色，不过打分项目就是这样,有些主观因素我们无法控制。”</p></blockquote><p>赛后，肖若腾在得知自己无缘冠军后，默默收起用来庆祝的国旗，带着落寞的眼神大度地为对手鼓掌。</p><p>肖若腾收起国旗后落寞的眼神</p><p>这就是大将风范，在我们心中他已经是冠军了。</p><p>电影《飞驰人生》中有一段话：</p><blockquote><p>“如果你想要公平就来参加体育比赛，如果你想要绝对的公平就不要来参加体育比赛！”</p></blockquote><p>这世上原本就没有绝对的公平，而消除不公的唯一方法就是凭实力拉开与对手的差距，让对方输的心服口服。</p><p>有句话说的好：</p><blockquote><p>“当你无法改变环境的时候，就改变自己，让自己变得更强。”</p></blockquote><p>就像沙粒进入蚌体内时，蚌也感到很不舒服，但又无法把沙粒排出。</p><p>蚌没有怨天尤人，而是用体内营养把沙粒包起来，变成珍珠。</p><p>面对生活中的不如意，我们应以“蚌”的肚量去包容，然后把所有困难当成自我磨练的工具，让自己变得更强大。</p><p>人生的不平，就像雨中的泥泞，跨过去你就赢了。</p><h2 id="小小的进步胜过原地踏步，人不怕慢只怕站"><a href="#小小的进步胜过原地踏步，人不怕慢只怕站" class="headerlink" title="小小的进步胜过原地踏步，人不怕慢只怕站"></a>小小的进步胜过原地踏步，人不怕慢只怕站</h2><p>8月1日，苏炳添在奥运会男子100米决赛中以9秒98的成绩排名第六，创造历史。</p><p>此前，他跑出个人历史最好成绩9秒83，打破亚洲纪录，成为首位闯进奥运会男子百米决赛的中国人。</p><p>就像他在半决赛发枪前，用大拇指与食指，摆出一个“一厘米”的手势后说的那样：“进步一点点就好。”</p><p>不要小看一点点的力量，微小的进步就像“蝴蝶效应”振动的翅膀，未来某一天，会在你的人生中掀起波澜。</p><p>有人问：如何吃掉一头大象？</p><p>最好的答案就是：一口一口吃。</p><p>小步迈进，才有余力。</p><p>生活中的我们也应抱有这样的心态。</p><p>走得慢点没关系，只要不后退，一样可以行稳致远。</p><p>汪国真说的好：</p><blockquote><p>“没有比人更高的山，没有比脚更长的路。”</p></blockquote><p>人生之路再长，追求者的脚步都能将它丈量；</p><p>困难之山再高，奋进者的双脚都能将它攀登。</p><p>每个奋斗不止的人，都能达成所愿，毕竟人不怕慢，只怕站。</p><h2 id="好心态，是一个人最大的能力"><a href="#好心态，是一个人最大的能力" class="headerlink" title="好心态，是一个人最大的能力"></a>好心态，是一个人最大的能力</h2><p>奥运赛场，不只是选手的比拼，也是国与国之间的竞争。</p><p>谁能率先为中国拿下第一金，也是大家比较关心的事。</p><p>第二天的射击项目，就被大家寄予厚望，我们守在屏幕前，期待升国旗、奏国歌的时刻。</p><p>比赛进入最后一轮比拼时， 21岁清华学生杨倩在落后对手0.2环的情况下，不慌不忙，稳稳打出最后一枪。</p><p>逆转局势，顺利拿下了东京奥运会的第一枚金牌！</p><p>杨倩曾说：</p><blockquote><p>“练射击最后不是技术上的比拼，而是心态上的较量。决赛中谁的心态好，谁就能发挥得更加出色。”</p></blockquote><p>其实，不只比赛， 生活亦是如此，拥有好心态的人过得更顺心。</p><p>乐观者，眼所见皆美好；悲观者，眼所见皆哀怨。</p><p>唯有心态好的人才能在穿梭生活的风雨后，看到属于自己的彩虹。</p><p>易卜生说：</p><blockquote><p>“真正的强者，善于从顺境中找到阴影，从逆境中找到光亮，时时校准自己的目标。”</p></blockquote><p>人生难免有起伏得失，既然无法避免，不如保持一个好心态，坦然面对，你会发现烦忧之事不过如此。</p><p>愿你能成为真正的强者，即使窗外狂风骤雨，内心依旧波澜不惊。</p><h2 id="每一个努力打拼的人，都是生活的勇者"><a href="#每一个努力打拼的人，都是生活的勇者" class="headerlink" title="每一个努力打拼的人，都是生活的勇者"></a>每一个努力打拼的人，都是生活的勇者</h2><p>8月5日下午，跳水女子10米单人台决赛上，中国选手全红婵，起跳干脆利落，入水波澜不惊，赢得掌声不断。</p><p>最后，她以最高分轻松摘取一枚金牌。</p><p>14岁的她虽是第一参加奥运会，但一点也不怯场，命运给她机会，她便牢牢抓住了。</p><p>教练说她取得现在的成绩都是刻苦训练换来的：</p><blockquote><p>“全红婵每天的训练量以百次计，每次训练都全力以赴，她值得她的成绩。”</p></blockquote><p>小小年纪为何如此拼命，她在回答记者采访时解释道：</p><p>因为知道妈妈生病了，需要很多钱治病，所以想要赢得比赛，赚很多钱回去给她治病。</p><p>理由简单，却让很多人鼻子一酸。</p><p>有人说：</p><blockquote><p>“我们在外面拼命努力，不是因为我们喜欢这样的生活方式，只是因为我们有要守护的人，要守护的家。”</p></blockquote><p>每一个加班的夜晚，都是想让家人睡得更安稳；</p><p>每一次雨中的逆行，都是为了爱的人不被雨淋。</p><p>爱总有神奇的魔法，赐予我们强大的信念，支撑我们砥砺前行。</p><p>愿我们都有守护家人的能力，护他们余生周全，一生无忧。</p><p>有时候想想，人生就像这场奥运会一样。</p><p>过程充满未知和挑战，但勇敢的人都收获了属于自己的“奖牌”。</p><p>这就是奥运竞技带给我们的启示：</p><p>人生有成功也有失败，永不言败的人不会输；</p><p>也许我们出身平凡，但我命由我不由天；</p><p>保持好心态，带着最好的状态，向生活发起挑战的人都是自己的超级英雄。</p><p>有得有失的才是人生，有喜有悲的才是生活，全力以赴，认真生活的人最可爱。</p><p>（摘自网络）</p>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
      <tag>奥运</tag>
      
      <tag>人生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>世界名著最智慧的10句话</title>
    <link href="/2002/"/>
    <url>/2002/</url>
    
    <content type="html"><![CDATA[<h1 id="世界名著最智慧的10句话"><a href="#世界名著最智慧的10句话" class="headerlink" title="世界名著最智慧的10句话"></a>世界名著最智慧的10句话</h1><ul><li>你自己的人生，要大胆一点，自信一点，照着自己喜欢的样子去活。</li><li>一本书读过，总会有一些句子被记住。</li><li>这些被记住的话，又在不经意间影响着我们的生活。</li><li>书就是有这种魅力，经典名著更是如此。无论哪一句，都让人满心余香。</li></ul><hr><h2 id="莫泊桑-《一生》"><a href="#莫泊桑-《一生》" class="headerlink" title="莫泊桑 《一生》"></a>莫泊桑 《一生》</h2><blockquote><p>“生活不可能像你想象的那么好，但也不会像你想象的那么糟。<br>我觉得人的脆弱和坚强都超乎自己的想象。<br>有时，我可能脆弱得一句话就泪流满面；<br>有时，也发现自己咬着牙走了很长的路。”</p></blockquote><p>每个人都在自己的生活中，努力着、拼命着。</p><p>但我们知道，生活有时候很坏，你以为看到的是希望，偏偏给你的是一盆冷水。</p><p>但有时候，你看不到希望时，又会收获很多意想不到的温暖。珍惜拥有，一切都会好起来的。</p><h2 id="奥斯特洛夫斯基-《钢铁是怎样炼成的》"><a href="#奥斯特洛夫斯基-《钢铁是怎样炼成的》" class="headerlink" title="奥斯特洛夫斯基 《钢铁是怎样炼成的》"></a>奥斯特洛夫斯基 《钢铁是怎样炼成的》</h2><blockquote><p>“人最宝贵的是生命，生命对人来说只有一次。<br>人的一生应当这样度过：当他回首往事时，不会因为碌碌无为，虚度年华而悔恨；也不会因为为人卑劣，生活庸俗而愧疚。”</p></blockquote><p>每个人的生命都没有重来的机会，它只有一次。</p><p>因而无论对谁来说，生命的所有时刻都是现场直播。</p><p>要想这场直播演得精彩，每个人都必须努力，去尽全力做一个好人。</p><p>去成全别人，更去成全自己。</p><h2 id="孔子-《论语》"><a href="#孔子-《论语》" class="headerlink" title="孔子 《论语》"></a>孔子 《论语》</h2><blockquote><p>“君子坦荡荡，小人常戚戚。”</p></blockquote><p>这个世上，有君子，也有小人，是再正常不过的事情。</p><p>光明磊落的人，不忧也不惧，他们对得起自己的所作所为。</p><p>喜欢算计的人，才容易患得患失，庸人自扰就是这个道理。</p><p>孔子还有话说：</p><blockquote><p>“在邦无怨，在家无怨。”</p></blockquote><p>怨气，是最不能要的东西。就算生活困难，吃粗粮，喝冷水，弯着胳膊做枕头，也有着自己的人生乐趣。</p><h2 id="路遥-《平凡的世界》"><a href="#路遥-《平凡的世界》" class="headerlink" title="路遥 《平凡的世界》"></a>路遥 《平凡的世界》</h2><blockquote><p>“生活不能等待别人来安排，要自己去争取和奋斗；<br>而不论其结果是喜是悲，但可以慰藉的是，你总不枉在这世界上活了一场。”</p></blockquote><p>“珍重”和“争取”，应该是人最应该实践的。</p><p>珍重那些我们已经拥有的。</p><p>争取那些自己想得到的，就去搏一搏，即使最后得不到，也不白费一场。</p><p>没人会安排好一切，让你一生顺风顺水，且行且珍惜，且行且努力。</p><p>即使再平凡的人，也要默默加油。</p><h2 id="加西亚·马尔克斯-《百年孤独》"><a href="#加西亚·马尔克斯-《百年孤独》" class="headerlink" title="加西亚·马尔克斯 《百年孤独》"></a>加西亚·马尔克斯 《百年孤独》</h2><blockquote><p>“你那么憎恨那些人，跟他们斗了那么久，最终却变得和他们一样，人世间没有任何理想值得以这样的沉沦作为代价。”</p></blockquote><p>最悲哀的莫过于，你变成了自己最讨厌的那种人。</p><p>我们的一生，会经历很多愤懑和不平，这是常态。</p><p>一路走过来，总会有人让你恨得直咬牙。</p><p>你痛恨那种人，拼了命要逃离和她的牵连。</p><p>到最后，你没想到，自己却成为了和她一样的人。</p><p>因为太记住了“恨”，不管你逃到多远，它都在你心里扎了根。</p><p>这份恨，折磨你，也改变你。</p><p>最终，当恨意过头了，你都忘记自己本来是什么样子了。</p><h2 id="塞林格-《麦田守望者》"><a href="#塞林格-《麦田守望者》" class="headerlink" title="塞林格 《麦田守望者》"></a>塞林格 《麦田守望者》</h2><blockquote><p>“记住该记住的，忘记该忘记的。<br>改变能改变的，接受不能改变的。”</p></blockquote><p>“坦然”两个字，不容易做到，却需要去做到。</p><p>坦然接受你能力之外的事情，坦然面对你挽不回的人，坦然去接受面对，也要坦荡荡去争取和获得。</p><p>不要为还没发生过的事情而烦恼，也不要对已经发生的事情而恐惧。</p><p>还没发生的，不一定就会来。</p><p>而已经来了的麻烦，哪怕再害怕也没用，还不如去好好面对呢。</p><p>所以做人就是这样，要么就安之若素，要么就奋勇前进。</p><h2 id="托尔斯泰-《战争与和平》"><a href="#托尔斯泰-《战争与和平》" class="headerlink" title="托尔斯泰 《战争与和平》"></a>托尔斯泰 《战争与和平》</h2><blockquote><p>“每个人都会有缺陷，就像被上帝咬过的苹果，有的人缺陷比较大，正是因为上帝特别喜欢他的芬芳。”</p></blockquote><p>所以，不要去对任何人的生活指指点点。</p><p>无论是他身体有缺陷或者生活有缺陷，这些都与我们无关。</p><p>能做的，是去善待每一个人，不要让自己的某句话某个举动，伤害到无辜的人。</p><h2 id="大仲马-《基督山伯爵》"><a href="#大仲马-《基督山伯爵》" class="headerlink" title="大仲马 《基督山伯爵》"></a>大仲马 《基督山伯爵》</h2><blockquote><p>“幸福就是一双鞋，合不合适只有自己一个人知道。”</p></blockquote><p>有人会太在意外界的声音，以为人家说好的，也许对自己就是好的，以为别人说不好的，那肯定就是不能要的。</p><p>但到底是不是合适你的，旁人又怎么知道呢？</p><p>好比上学，你学什么专业，更主要的是看你的兴趣。</p><p>学一个自己没感觉的专业，只会越学越累。</p><p>选择一份工作，不是别人说那个工作有前途你就去应聘。</p><p>就算你真得到那份工作，也只会越来越无力应对。</p><p>感情、婚姻更是如此，幸不幸福满不满足，最后还是看你自己感觉合不合适，能不能一起走下去。</p><h2 id="达尔文-《物种起源》"><a href="#达尔文-《物种起源》" class="headerlink" title="达尔文 《物种起源》"></a>达尔文 《物种起源》</h2><blockquote><p>“物竞天择，适者生存。”</p></blockquote><p>生物之间相互竞争，能适应者生存下来。</p><p>生物，不单单指那些动物，人也是一样。你觉得社会给每个人的机会是均等的，但并不是。</p><p>社会并不是机会均等的，人想要生活，想要成功，就要主动进攻，去把握各种可能把握的机会。</p><p>如果只是等待机会，那最大的可能就是被淘汰。</p><p>要更好的生存，就要逼自己优秀，才能拿到更好的资源。</p><h2 id="霍达-《穆斯林的葬礼》"><a href="#霍达-《穆斯林的葬礼》" class="headerlink" title="霍达 《穆斯林的葬礼》"></a>霍达 《穆斯林的葬礼》</h2><blockquote><p>“别人的误解、偏见并不可怕，可怕的是失去了自信；<br>如果你是自信的，就什么话都不用说了。”</p></blockquote><p>有时候，一个人走偏了路，往往就是太在意别人指的路。</p><p>世界上有那么多人，每个人都来给你指路，每个人都来教你该怎么做人。</p><p>众人有口，你听谁的才算对？</p><p>不要太过在意别人的评价，也不要让别人太参与你的人生。</p><p>你自己的人生，要大胆一点，自信一点，照着自己喜欢的样子去活。</p><p>（摘自网络）</p>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>名著</tag>
      
      <tag>智慧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程序员才懂的幽默</title>
    <link href="/2001/"/>
    <url>/2001/</url>
    
    <content type="html"><![CDATA[<h1 id="【今日搞笑】"><a href="#【今日搞笑】" class="headerlink" title="【今日搞笑】"></a>【今日搞笑】</h1><ul><li>人生不如意十之八九。开心是一天，不开心也是一天。</li><li>加油吧，打工人！！！</li></ul><hr><ol start="0"><li>如果软件正在占领全世界，为什么程序员得不到尊重？</li></ol><p>遍身罗绮者，不是养蚕人。</p><ol><li>中国大陆的盗版Windows系统都是怎么做出来的？</li></ol><p>复制、粘贴。</p><ol start="2"><li>中国梦和美国梦的区别是什么？</li></ol><p>中国梦.txt，美国梦.exe</p><ol start="3"><li>请用最简洁的语言描述我国fa lv。</li></ol><p>754</p><ol start="4"><li>哪种编程能够永生？</li></ol><p>除非你能一直续。</p><p>5.怎么翻译Linus Torvalds的这句「Talk is cheap. Show me the code」比较好？</p><p>屁话少说，放码过来。</p><ol start="6"><li>Google Glass的启动命令：OK，Glass，中文翻译为什么最合适？</li></ol><p>好的，镜哥哥。</p><ol start="7"><li>什么是递归？</li></ol><p>古之欲明明德于天下者，先治其国；欲治其国者，先齐其家；欲齐其家者，先修其身；欲修其身者，先正其心；欲正其心者，先诚其意；欲诚其意者，先致其知，致知在格物。物格而后知至，知至而后意诚，意诚而后心正，心正而后身修，身修而后家齐，家齐而后国治，国治而后天下平。</p><ol start="8"><li>你见过最烂的设计是什么？</li></ol><p>正反面永远一次插不对的 usb 接口设计</p><ol start="11"><li>如果你是图灵测试者，你会问机器什么问题？</li></ol><p>金坷垃好处都有啥？</p><ol start="12"><li>作为IT人员，你觉得什么工具能大大提高你的工作效率？</li></ol><p>单身。</p><ol start="13"><li>Android上能提高学习、工作效率的应用有哪些？</li></ol><p>关机。</p><ol start="14"><li>在网吧写代码是怎样一种体验？</li></ol><p>装完开发环境，重启，没了。</p><ol start="15"><li>为什么很多程序员、geek 都喜欢熬夜，而且在后半夜工作效率异常高？</li></ol><p>一个姑娘问我，搞学术的为什么都睡得那么晚，难道只有到晚上才有灵感？不是，姑娘，搞学术不靠灵感，靠的是碌碌无为的白天引发的愧疚心。</p><p>程序员、Geek 们也是这样。</p><ol start="16"><li>单身程序狗解决了一个技术难题后没有妹子可以炫耀或夸一下自己怎么办？</li></ol><p>现在你明白了吧，为什么那么多程序员要写技术博客。</p><ol start="17"><li>有哪些老鸟程序员知道而新手不知道的小技巧？</li></ol><p>程序不等于数据结构加算法，而等于搜索引擎加英语。</p><ol start="18"><li>程序员的核心竞争力是什么？为什么？</li></ol><p>“玩算法的码农，打拼靠蓝条，像是法师。数学就等于蓝条最大值，数学差，魔法值不高，很快就到瓶颈了。外语影响回蓝速度。经验和智力加急速和穿透的。不玩算法的码农，像是战士，打拼靠血条，体质加生命，精神加生命回复，经验和敏捷加急速和破甲。”</p><ol start="19"><li>IT大牛是怎样炼成的？</li></ol><p>记得初入公司时，写的代码乱七八糟，错误百出，bug连连，不仅项目经理骂我，其他同事也对我怨声载道。后来听朋友介绍，就报了一个培训班。经过1个月的刻苦学习，终于功夫不负有心人—他们都骂不过我了。</p><ol start="20"><li>会写脚本的程序员如何去阿里工作？</li></ol><p>告诉面试官，我不吃月饼。</p><ol start="21"><li>码农们最常说的谎言是什么？</li></ol><p>// TODO</p><ol start="22"><li>程序员的优越感从何而来？感觉码农写代码并没有比修自行车高贵，那么为什么他们这么吊炸天？</li></ol><p>码农也是你们叫的？</p><ol start="23"><li>你有哪些用计算机技能解决生活问题的经历？</li></ol><p>（1）我认识一个大牛，他不喜欢洗袜子，又不喜欢袜子的臭味。他买了很多样式一样的袜子，把这些袜子放在地上，根据臭的程度，摆一个二叉堆。每天早上，他pop两只最“香”的袜子，穿上；晚上回到家，把袜子脱下来，push到堆里。某一天，top的袜子超过他的耐臭能力，全扔掉，买新的。</p><p>（2）写个死循环把笔记本的CPU和GPU占满，把出风口当吹风机吹头。</p><ol start="24"><li>突然想开一家程序员主题的餐馆，名字就叫程序员的菜，菜名就叫各种语言中的关键字，各位指点一哈，有前途没？</li></ol><p>北京西直门嘉茂广场外面有很大一个招牌“mysql”,当年我就是好奇这家餐厅和“mysql”到底有啥关系才去这家韩国餐厅的，结果服务员告诉我那是“明月三千里”的缩写，我有种被忽悠的赶脚。</p><ol start="25"><li>如何让别人明白「学习或从事计算机专业的人不一定会修电脑」？</li></ol><p>我是学法学的是不是要搓个火球给你看阿？</p><ol start="26"><li>如何反驳「程序员离开电脑就是废物」这个观点？</li></ol><p>不不不，很多程序员在电脑前也是废物。</p><ol start="27"><li>为什么程序员无论到哪儿都喜欢背电脑包，哪怕里面没有装电脑？</li></ol><p>因为他们没有别的包。</p><ol start="28"><li>程序员都有哪些强迫症行为？</li></ol><p>乘电梯的时候看着电梯的按钮面板（UI）常常会开始思考电梯的调度算法，然后仔细一想好像状态挺多的，<br>多个实例之间状态可以互相影响，还涉及到一些优先级、加速度、预判方面的东西，仔细想想其实挺复杂的，<br>然后还没等到出电梯就放弃了。然后不知道哪次坐又会望着面板开始想。</p><ol start="29"><li>发呆是一种生理需求吗？</li></ol><p>其实是删除缓存文件加整理磁盘碎片</p><ol start="30"><li>什么时候感觉过你的心是凉的？</li></ol><p>文件没保存</p><ol start="31"><li>如何回复程序员发来的短信：「Hello world」？</li></ol><p>hello nerd.</p><ol start="32"><li>程序员的鄙视链是什么？</li></ol><p>老婆漂亮的程序员，鄙视老婆不漂亮的程序员。</p><p>有老婆的程序员，鄙视没有老婆的程序员。</p><p>没有老婆有女朋友的程序员，鄙视单身程序狗。</p><p>在单身狗之间，才有语言、编辑器和操作系统的互相鄙视。</p><ol start="33"><li>程序员女朋友如何给程序员男朋友过生日？</li></ol><p>告诉他，接口已经准备好了。</p><ol start="34"><li>女票允许我出轨，并且还介绍她闺密给我认识。在她真的很爱我的前提下，该如何理解她的行为？</li></ol><p>千万不要上当！！！Mac告诉你，我也可以装windows哦，但你真的装了，会用高发热来报复你的！</p><ol start="35"><li>分手100天了，还没有走出来怎么办？</li></ol><p>替换文件永远比删除文件更彻底。</p><ol start="36"><li>程序员夫妻结婚戒指刻什么字好？</li></ol><p>0 error 0 warning</p><ol start="37"><li>乞求代码没有bug，该拜哪个神仙？</li></ol><p>拜雍正，专治八阿哥。</p><ol start="38"><li>产品死了，如何安葬？</li></ol><p>开源。</p><ol start="39"><li>《微微一笑很倾城》中的大四刚毕业的计算机水平是现实中能够达到的吗？电视剧中肖奈精通软件制作（这是小case了），<br>精通黑客技术（打破世界级比赛记录），写的了游戏引擎（领先业内水平），精通算法优化。</li></ol><p>我也是IT刚毕业学生，前端er一枚。说实话整个剧中被肖奈的水平震惊了，连女演员好不好看都顾不得了。且不说剧情，<br>这个水平是一个大四学生能够具备的吗。我对自己产生了深深的怀疑。</p><p>（1）你怎么不问男主的长相是一个大四学生所具备的吗。</p><p>（2）大四有这个技术水平的，肯定没有那么多头发。</p><ol start="40"><li>为什么圣斗士每次出招前都要大喊一声招式？</li></ol><p>函数要先声明，然后才能调用。</p><ol start="41"><li>为何诸葛亮常年拿一个羽毛扇？</li></ol><p>跟CPU上必须装风扇是一个道理。</p><ol start="42"><li>苹果是宗教吗？</li></ol><p>是！并且教内有这样一个传说：任何人只要卖两个肾去买iphone就能见到教主。</p><ol start="43"><li>罗永浩提出的锤子超过苹果的时间表大概是怎么样的？</li></ol><p>家祭无忘告乃翁。</p><p>（摘自网络）</p>]]></content>
    
    
    <categories>
      
      <category>搞笑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序员</tag>
      
      <tag>幽默</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DP专栏</title>
    <link href="/1003/"/>
    <url>/1003/</url>
    
    <content type="html"><![CDATA[<h1 id="数字三角形"><a href="#数字三角形" class="headerlink" title="数字三角形"></a>数字三角形</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> dp[<span class="hljs-number">200</span>][<span class="hljs-number">200</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>            <span class="hljs-built_in">cin</span>&gt;&gt;dp[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>            dp[i][j]=dp[i][j]+max(dp[i+<span class="hljs-number">1</span>][j],dp[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="找对象-TOJ"><a href="#找对象-TOJ" class="headerlink" title="找对象 TOJ"></a>找对象 TOJ</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br>ll a[<span class="hljs-number">3066</span>][<span class="hljs-number">3066</span>];<br>ll dp[<span class="hljs-number">3066</span>][<span class="hljs-number">3066</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-number">0</span>); <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>); <span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> m,n;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;m&gt;&gt;n;<br>    <span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span>(dp));<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            <span class="hljs-built_in">cin</span>&gt;&gt;a[i][j];<br>            dp[i][j]=a[i][j]+min(dp[i<span class="hljs-number">-1</span>][j],dp[i][j<span class="hljs-number">-1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;dp[m][n];<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C-大盗阿福-计蒜客-T1227"><a href="#C-大盗阿福-计蒜客-T1227" class="headerlink" title="C - 大盗阿福 计蒜客 - T1227"></a>C - 大盗阿福 计蒜客 - T1227</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> w[<span class="hljs-number">100004</span>];<br><span class="hljs-keyword">int</span> dp[<span class="hljs-number">100004</span>][<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> t;<br><span class="hljs-built_in">cin</span>&gt;&gt;t;<br><span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-keyword">int</span> n;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-built_in">cin</span>&gt;&gt;w[i];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            dp[i][<span class="hljs-number">0</span>]=max(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>],dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]);<br>            dp[i][<span class="hljs-number">1</span>]=dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]+w[i];<br>        &#125;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;max(dp[n][<span class="hljs-number">0</span>],dp[n][<span class="hljs-number">1</span>])&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="A-免费馅饼-HDU-1176"><a href="#A-免费馅饼-HDU-1176" class="headerlink" title="A - 免费馅饼 HDU - 1176"></a>A - 免费馅饼 HDU - 1176</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> dp[<span class="hljs-number">100004</span>][<span class="hljs-number">12</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> m;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m) &amp;&amp; m)&#123;<br>    <span class="hljs-keyword">int</span> maxt=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(dp));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>            <span class="hljs-keyword">int</span> x,t;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;t);<br>            dp[t][x]++;<br>            <span class="hljs-keyword">if</span>(t&gt;maxt) maxt=t;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=maxt;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">10</span>;j&gt;=<span class="hljs-number">0</span>;j--)&#123;<br>                dp[i][j]+=max(dp[i+<span class="hljs-number">1</span>][j],max(dp[i+<span class="hljs-number">1</span>][j<span class="hljs-number">-1</span>],dp[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]));<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,dp[<span class="hljs-number">0</span>][<span class="hljs-number">5</span>]);<br><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>DP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础算法笔记（C++描述）</title>
    <link href="/1002/"/>
    <url>/1002/</url>
    
    <content type="html"><![CDATA[<h1 id="1-位运算"><a href="#1-位运算" class="headerlink" title="1.位运算"></a>1.位运算</h1><h2 id="1-1-快速幂（取模）a-b-mod-k"><a href="#1-1-快速幂（取模）a-b-mod-k" class="headerlink" title="1.1 快速幂（取模）a^b mod k"></a>1.1 快速幂（取模）a^b mod k</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO ios::sync_with_stdio(false);cin.tie(0);cout.tie(0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">fastpow</span><span class="hljs-params">(ll base,ll <span class="hljs-built_in">pow</span>,ll m)</span></span>&#123;<br>    ll ans =<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">pow</span>)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">pow</span> &amp; <span class="hljs-number">1</span>)  <span class="hljs-comment">//如果pow是奇数</span><br>            ans = ans * base %m;<br>        base = base * base %m;<br>        <span class="hljs-built_in">pow</span> &gt;&gt;= <span class="hljs-number">1</span>;  <span class="hljs-comment">//相当于pow/=2</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (ans %m);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    IO;<br>    <span class="hljs-keyword">int</span> base,<span class="hljs-built_in">pow</span>,m;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;base&gt;&gt;<span class="hljs-built_in">pow</span>&gt;&gt;m;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;fastpow(base,<span class="hljs-built_in">pow</span>,m);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2-64位整数乘法-a-b-mod-k"><a href="#1-2-64位整数乘法-a-b-mod-k" class="headerlink" title="1.2 64位整数乘法 a*b mod k"></a>1.2 64位整数乘法 a*b mod k</h2><p>求 a 乘 b 对 p 取模的值。<br>输出一个整数，表示a*b mod p的值。<br>1≤a,b,p≤1018</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO ios::sync_with_stdio(false);cin.tie(0);cout.tie(0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">ll <span class="hljs-title">fastpow</span><span class="hljs-params">(ull base,ull <span class="hljs-built_in">pow</span>,ull m)</span></span>&#123;<br>    ull ans =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">pow</span>)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">pow</span> &amp; <span class="hljs-number">1</span>)<br>            ans = (ans + base) %m;<br>        base = base * <span class="hljs-number">2</span> %m;<br>        <span class="hljs-built_in">pow</span> &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    IO;<br>    ull base,<span class="hljs-built_in">pow</span>,m;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;base&gt;&gt;<span class="hljs-built_in">pow</span>&gt;&gt;m;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;fastpow(base,<span class="hljs-built_in">pow</span>,m);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-3-位运算（-amp-、-、-、-、-gt-gt-、-lt-lt-）"><a href="#1-3-位运算（-amp-、-、-、-、-gt-gt-、-lt-lt-）" class="headerlink" title="1.3 位运算（&amp;、|、^、~、&gt;&gt;、&lt;&lt;）"></a>1.3 位运算（&amp;、|、^、~、&gt;&gt;、&lt;&lt;）</h2><p>洛谷 P1100 高低位交换</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO ios::sync_with_stdio(false);cin.tie(0);cout.tie(0)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    IO;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;(n&gt;&gt;<span class="hljs-number">16</span>)+(n&lt;&lt;<span class="hljs-number">16</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-STL"><a href="#2-STL" class="headerlink" title="2.STL"></a>2.STL</h1><h2 id="2-1-排序"><a href="#2-1-排序" class="headerlink" title="2.1 排序"></a>2.1 排序</h2><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><blockquote><p><code>#include &lt;algorithm&gt;</code><br><code>sort(a,a+n,cmp)</code>:对容器或普通数组中 [first, last) 范围内的元素进行排序，默认进行升序排序。<br>（序的数组的起始地址，结束的地址，[排序的方法]）<br>比较函数：<code>从小到大（默认）less&lt;int&gt;() 从大到小greater&lt;int&gt;() </code><br><code>int cmp(int a,int b)&#123;return a&lt;b;&#125;</code></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO ios::sync_with_stdio(false);cin.tie(0);cout.tie(0)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">100005</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    IO;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>    &#125;<br>    sort(a,a+n,less&lt;<span class="hljs-keyword">int</span>&gt;());<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="stable-sort"><a href="#stable-sort" class="headerlink" title="stable_sort"></a>stable_sort</h3><blockquote><p>stable_sort() 函数完全可以看作是 sort() 函数在功能方面的升级版。换句话说，stable_sort() 和 sort() 具有相同的使用场景，就连语法格式也是相同的，只不过前者在功能上除了可以实现排序，还可以保证不改变相等元素的相对位置。</p></blockquote><h3 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound"></a>lower_bound</h3><p>lower_bound()函数需要加头文件<code>include&lt;algorithm&gt;</code>,其基本用途是查找(返回)有序区间中第一个大于或等于给定值的元素的位置，其中排序规则可以通过二元关系来表示。</p><p>基本用法lower_bound(a,a+n,x);其中a为数组或容器名，n为数组容量，x为要查找值。注意使用前数组必须有序才能达到描述效果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> a[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>&#125;;<br>   <span class="hljs-built_in">cout</span> &lt;&lt; (lower_bound(a, a + <span class="hljs-number">5</span>, <span class="hljs-number">1</span>) - a) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>   <span class="hljs-comment">// 第一个大于等于1的元素是1，下标是0</span><br>   <span class="hljs-built_in">cout</span> &lt;&lt; (lower_bound(a, a + <span class="hljs-number">5</span>, <span class="hljs-number">2</span>) - a) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>   <span class="hljs-comment">// 第一个大于等于2的元素是3，下标是1</span><br>   <span class="hljs-built_in">cout</span> &lt;&lt; (lower_bound(a, a + <span class="hljs-number">5</span>, <span class="hljs-number">8</span>) - a) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>   <span class="hljs-comment">// 第一个大于等于8的元素是9，下标是4</span><br>   <span class="hljs-built_in">cout</span> &lt;&lt; (lower_bound(a, a + <span class="hljs-number">5</span>, <span class="hljs-number">100</span>) - a) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>   <span class="hljs-comment">// 最大的元素也不比100大，故返回值是last，再减a也就是5</span><br></code></pre></td></tr></table></figure><h3 id="uppor-bound"><a href="#uppor-bound" class="headerlink" title="uppor_bound"></a>uppor_bound</h3><p>用法跟<code>lower_bound()</code>一样，只不过它返回的是<code>第一个大于x的值的地址</code>， 而lower_bound()是返回<code>第一个大于等于x的值的地址</code>，&gt; 和 &gt;= 是二者的区别</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> a[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>&#125;;<br>   <span class="hljs-built_in">cout</span> &lt;&lt; (upper_bound(a, a + <span class="hljs-number">5</span>, <span class="hljs-number">1</span>) - a) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>   <span class="hljs-comment">// 第一个大于1的元素是3，下标是1</span><br>   <span class="hljs-built_in">cout</span> &lt;&lt; (upper_bound(a, a + <span class="hljs-number">5</span>, <span class="hljs-number">2</span>) - a) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>   <span class="hljs-comment">// 第一个大于2的元素是3，下标是1</span><br>   <span class="hljs-built_in">cout</span> &lt;&lt; (upper_bound(a, a + <span class="hljs-number">5</span>, <span class="hljs-number">7</span>) - a) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>   <span class="hljs-comment">// 第一个大于7的元素是9，下标是4</span><br>   <span class="hljs-built_in">cout</span> &lt;&lt; (upper_bound(a, a + <span class="hljs-number">5</span>, <span class="hljs-number">100</span>) - a) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>   <span class="hljs-comment">// 最大的元素也不比100大，故返回值是last，再减a也就是5</span><br></code></pre></td></tr></table></figure><h2 id="2-2-动态数组-vector"><a href="#2-2-动态数组-vector" class="headerlink" title="2.2 动态数组 vector"></a>2.2 动态数组 vector</h2><blockquote><p>动态数组，从末尾能够快速插入与删除，直接访问如何元素<br><img src="/.io//1610855422329.png" alt="Alt text"></p></blockquote><h2 id="2-3-队列"><a href="#2-3-队列" class="headerlink" title="2.3 队列"></a>2.3 队列</h2><h3 id="2-3-1-queue"><a href="#2-3-1-queue" class="headerlink" title="2.3.1 queue"></a>2.3.1 queue</h3><blockquote><p>队列先进先出<br><img src="/.io//1610855907560.png" alt="Alt text"></p></blockquote><h3 id="2-3-2-priority-queue"><a href="#2-3-2-priority-queue" class="headerlink" title="2.3.2 priority_queue"></a>2.3.2 priority_queue</h3><blockquote><p>优先队列，最高优先级元素总是第一个出列<br><img src="/.io//1610855927046.png" alt="Alt text"></p></blockquote><h3 id="2-3-3-单调队列"><a href="#2-3-3-单调队列" class="headerlink" title="2.3.3 单调队列"></a>2.3.3 单调队列</h3><h3 id="2-3-4-双端队列-duque"><a href="#2-3-4-双端队列-duque" class="headerlink" title="2.3.4 双端队列 duque"></a>2.3.4 双端队列 duque</h3><h2 id="2-4-栈-stack"><a href="#2-4-栈-stack" class="headerlink" title="2.4 栈 stack"></a>2.4 栈 stack</h2><p><img src="/.io//1610855883010.png" alt="Alt text"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO ios::sync_with_stdio(false);cin.tie(0);cout.tie(0)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">stack</span> &lt;<span class="hljs-keyword">int</span>&gt; s;<br>    <span class="hljs-keyword">int</span> x;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;x;<br>        <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        s.push(x);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!s.empty())&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;s.top()&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        s.pop();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-5-链表-list"><a href="#2-5-链表-list" class="headerlink" title="2.5 链表 list"></a>2.5 链表 list</h2><h2 id="2-6-set"><a href="#2-6-set" class="headerlink" title="2.6 set"></a>2.6 set</h2><p>set就是集合。STL的set用二叉搜索树实现，集合中<code>每个元素只出现一次</code>，并且是<code>排好序的</code>。访问元素的时间复杂度是O(log2n)，非常高效。<br>应用：去重<br><img src="/.io//1615527488003.png" alt="Alt text"></p><p>hdu1412<br>给你两个集合，要求{A} + {B}.<br>注:同一个集合中不会有两个相同的元素.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br>    <span class="hljs-keyword">int</span> n,m;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;m&gt;&gt;n)&#123;<br>        <span class="hljs-keyword">int</span> x;<br>        s.clear();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>            <span class="hljs-built_in">cin</span>&gt;&gt;x;<br>            s.insert(x);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-built_in">cin</span>&gt;&gt;x;<br>            s.insert(x);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it=s.begin();it!=s.end();it++)&#123;<br>            <span class="hljs-keyword">if</span>(it==s.begin()) <span class="hljs-built_in">cout</span>&lt;&lt;*it;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;*it;<br>        &#125;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-7-键值对-map"><a href="#2-7-键值对-map" class="headerlink" title="2.7 键值对 map"></a>2.7 键值对 map</h2><p>应用：离散化计数 </p><p><img src="/.io//1615538516805.png" alt="Alt text"></p><p>hdu1004<br>有多种颜色的气球，统计它们的个数，并找出数量最多的那种颜色。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>,<span class="hljs-keyword">int</span>&gt;ballon;<br>    <span class="hljs-built_in">string</span> color,ans;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)&amp;&amp;n)&#123;<br>        ballon.clear();<br>        <span class="hljs-keyword">while</span>(n--)&#123;<br>            <span class="hljs-built_in">cin</span>&gt;&gt;color;<br>            ballon[color]++;<br>        &#125;<br>        <span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>,<span class="hljs-keyword">int</span>&gt;::iterator it;<br>        <span class="hljs-keyword">int</span> maxx=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(it=ballon.begin();it!=ballon.end();it++)&#123;<br>            <span class="hljs-keyword">if</span>(it-&gt;second&gt;maxx)&#123;<br>                maxx=it-&gt;second;<br>                ans=it-&gt;first;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Joe经营着一个不大的水果店.他认为生存之道就是经营最受顾客欢迎的水果.现在他想要一份水果销售情况的明细表,这样Joe就可以很容易掌握所有水果的销售情况了.</p><p>Sample Input<br>1<br>5<br>apple shandong 3<br>pineapple guangdong 1<br>sugarcane guangdong 1<br>pineapple guangdong 3<br>pineapple guangdong 1</p><p>Sample Output<br>guangdong<br>   |—-pineapple(5)<br>   |—-sugarcane(1)<br>shandong<br>   |—-apple(3)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n,m,k;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">cin</span> &gt;&gt; n;<br><span class="hljs-keyword">while</span> (n--)&#123;<br><span class="hljs-built_in">cin</span> &gt;&gt; m;<br><span class="hljs-built_in">string</span> s1, s2;<br>        <span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt;&gt;p;<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt;q;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br><span class="hljs-built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; k;<br>p[s2][s1] += k;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : p)&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; it.first &lt;&lt; <span class="hljs-built_in">endl</span>;<br>q = it.second;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> itt : q)<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;   |----&quot;</span> &lt;&lt; itt.first &lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; itt.second &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (n) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h3><h2 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h2><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><blockquote><p>1.确定分界点 mid=(l+r)&gt;&gt;1<br>2.递归排序left,right<br>3.归并，合二为一</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO ios::sync_with_stdio(false);cin.tie(0);cout.tie(0)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> a[N],tmp[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> q[],<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    merge_sort(q,l,mid),merge_sort(q,mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>,i=l,j=mid+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=r)<br>        <span class="hljs-keyword">if</span>(q[i]&lt;=q[j]) tmp[k++]=q[i++];<br>        <span class="hljs-keyword">else</span> tmp[k++]=q[j++];<br>    <span class="hljs-keyword">while</span>(i&lt;=mid) tmp[k++]=q[i++];<br>    <span class="hljs-keyword">while</span>(j&lt;=r) tmp[k++]=q[j++];<br>    <span class="hljs-keyword">for</span>(i=l,j=<span class="hljs-number">0</span>;i&lt;=r;i++,j++) q[i]=tmp[j];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    IO;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>    merge_sort(a,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-前缀和、差分"><a href="#3-前缀和、差分" class="headerlink" title="3. 前缀和、差分"></a>3. 前缀和、差分</h1><h2 id="3-1-一维前缀和"><a href="#3-1-一维前缀和" class="headerlink" title="3.1 一维前缀和"></a>3.1 一维前缀和</h2><p>acwing795. 前缀和<br>输入一个长度为n的整数序列。<br>接下来再输入m个询问，每个询问输入一对l, r。<br>对于每个询问，输出原序列中从第l个数到第r个数的和。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO ios::sync_with_stdio(false);cin.tie(0);cout.tie(0)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-keyword">int</span> a[N],s[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    IO;<br>    <span class="hljs-keyword">int</span> n,m;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) s[i]=s[i<span class="hljs-number">-1</span>]+a[i];<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        <span class="hljs-keyword">int</span> l,r;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;l&gt;&gt;r;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;s[r]-s[l<span class="hljs-number">-1</span>]&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2-二维前缀和"><a href="#3-2-二维前缀和" class="headerlink" title="3.2 二维前缀和"></a>3.2 二维前缀和</h2><p><img src="/.io//1610684461051.png" alt="Alt text"><img src="/.io//1610684694954.png" alt="Alt text"></p><p>S[i,j]S[i,j]即为图1红框中所有数的的和为：<br><code>S[i,j]=S[i,j−1]+S[i−1,j]−S[i−1,j−1]+a[i,j]</code><br>(x1,y1),(x2,y2)(x1,y1),(x2,y2)这一子矩阵中的所有数之和为：<code>S[x2,y2]−S[x1−1,y2]−S[x2,y1−1]+S[x1−1,y1−1]</code></p><p>acwing796. 子矩阵的和</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO ios::sync_with_stdio(false);cin.tie(0);cout.tie(0)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1010</span>;<br><span class="hljs-keyword">int</span> a[N][N],s[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    IO;<br>    <span class="hljs-keyword">int</span> n,m,q;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>            <span class="hljs-built_in">cin</span>&gt;&gt;a[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>            s[i][j]=s[i<span class="hljs-number">-1</span>][j]+s[i][j<span class="hljs-number">-1</span>]-s[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+a[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        <span class="hljs-keyword">int</span> x1,y1,x2,y2;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;s[x2][y2]-s[x1<span class="hljs-number">-1</span>][y2]-s[x2][y1<span class="hljs-number">-1</span>]+s[x1<span class="hljs-number">-1</span>][y1<span class="hljs-number">-1</span>]&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3一维差分"><a href="#3-3一维差分" class="headerlink" title="3.3一维差分"></a>3.3一维差分</h2><p>AcWing 797. 差分<br>输入一个长度为n的整数序列。<br>接下来输入m个操作，每个操作包含三个整数l, r, c，表示将序列中[l, r]之间的每个数加上c。<br>请你输出进行完所有操作后的序列。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-keyword">int</span> a[N],b[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,m;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) b[i]=a[i]-a[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        <span class="hljs-keyword">int</span> l,r,c;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;l&gt;&gt;r&gt;&gt;c;<br>        b[l]+=c;<br>        b[r+<span class="hljs-number">1</span>]-=c;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        a[i]=b[i]+a[i<span class="hljs-number">-1</span>];<br>        <span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-4-二维差分"><a href="#3-4-二维差分" class="headerlink" title="3.4 二维差分"></a>3.4 二维差分</h2><p>AcWing 798. 差分矩阵<br>输入一个n行m列的整数矩阵，再输入q个操作，每个操作包含五个整数x1, y1, x2, y2, c，其中(x1, y1)和(x2, y2)表示一个子矩阵的左上角坐标和右下角坐标。<br>每个操作都要将选中的子矩阵中的每个元素的值加上c。<br>请你将进行完所有操作后的矩阵输出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-keyword">int</span> n,m,q;<br><span class="hljs-keyword">int</span> a[N][N],b[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;= n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>            <span class="hljs-built_in">cin</span>&gt;&gt;a[i][j];<br>            b[i][j] = a[i][j]-a[i<span class="hljs-number">-1</span>][j]-a[i][j<span class="hljs-number">-1</span>]+a[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        <span class="hljs-keyword">int</span> x1,y1,x2,y2,c;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;c;<br>        b[x1][y1]+=c;<br>        b[x1][y2+<span class="hljs-number">1</span>]-=c;<br>        b[x2+<span class="hljs-number">1</span>][y1]-=c;<br>        b[x2+<span class="hljs-number">1</span>][y2+<span class="hljs-number">1</span>]+=c;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>            a[i][j]=b[i][j]+a[i<span class="hljs-number">-1</span>][j]+a[i][j<span class="hljs-number">-1</span>]-a[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++) <span class="hljs-built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> path[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">bool</span> st[<span class="hljs-number">10</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(u==n)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>            <span class="hljs-built_in">cout</span>&lt;&lt;path[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!st[i])&#123;<br>            path[u]=i;<br>            st[i]=<span class="hljs-literal">true</span>;<br>            dfs(u+<span class="hljs-number">1</span>);<br>            path[u]=<span class="hljs-number">0</span>;<br>            st[i]=<span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    dfs(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h1><p>迷宫问题、最短路径</p><p>acwing173. 矩阵距离<br><img src="/.io//1611466726839.png" alt="Alt text"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1005</span>;<br><span class="hljs-keyword">char</span> s[N][N];<br><span class="hljs-keyword">int</span> d[N][N],n,m;<br><span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">int</span> dy[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;&gt;q;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(d));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>            <span class="hljs-built_in">cin</span>&gt;&gt;s[i][j];<br>            <span class="hljs-keyword">if</span>(s[i][j]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                q.push(<span class="hljs-built_in">make_pair</span>(i,j));<br>                d[i][j]=<span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(q.size())&#123;<br>        <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;now=q.front();<br>        q.pop();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">4</span>;k++)&#123;<br>            <span class="hljs-keyword">int</span> nx=now.first+dx[k];<br>            <span class="hljs-keyword">int</span> ny=now.second+dy[k];<br>            <span class="hljs-keyword">if</span>(nx&gt;=<span class="hljs-number">1</span>&amp;&amp;nx&lt;=n&amp;&amp;ny&gt;=<span class="hljs-number">1</span>&amp;&amp;ny&lt;=m&amp;&amp;d[nx][ny]==<span class="hljs-number">-1</span>)&#123;<br>                d[nx][ny]=d[now.first][now.second]+<span class="hljs-number">1</span>;<br>                q.push(<span class="hljs-built_in">make_pair</span>(nx,ny));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;d[i][j]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>acwing1076.迷宫问题<br><img src="/.io//1611469296939.png" alt="Alt text"><br><img src="/.io//1611469327343.png" alt="Alt text"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1005</span>;<span class="hljs-comment">//数据范围</span><br><span class="hljs-keyword">int</span> maze[N][N],v[N][N];<span class="hljs-comment">//存储迷宫，标记是否被访问过</span><br><span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>&#125;;<span class="hljs-comment">//x方向上的上下左右变化</span><br><span class="hljs-keyword">int</span> dy[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//y方向上的上下左右变化</span><br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;&gt;q;<span class="hljs-comment">//存放一维x坐标，二维y坐标</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> prex,prey;<br>&#125;pre[N][N];<span class="hljs-comment">//点的前驱坐标</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">road</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-comment">//递归反向输出</span><br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>&amp;&amp;y==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;0 0&quot;</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    road(pre[x][y].prex,pre[x][y].prey);<br>    <span class="hljs-built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;y&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>            <span class="hljs-built_in">cin</span>&gt;&gt;maze[i][j]; <span class="hljs-comment">//输入地图</span><br>        &#125;<br>    &#125;<br>    q.push(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)); <span class="hljs-comment">//起点入队</span><br>    v[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;  <span class="hljs-comment">//标记起点被访问过</span><br>    <span class="hljs-keyword">while</span>(q.size())&#123;<span class="hljs-comment">//当队列不为空时</span><br>        <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; now=q.front();<span class="hljs-comment">//取出对头元素</span><br>        q.pop();<span class="hljs-comment">//删除对头元素</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">4</span>;k++)&#123;<span class="hljs-comment">//上下左右四个方向做扩展</span><br>            <span class="hljs-keyword">int</span> nx=now.first+dx[k];<span class="hljs-comment">//x方向偏移量</span><br>            <span class="hljs-keyword">int</span> ny=now.second+dy[k];<span class="hljs-comment">//y方向偏移量</span><br>            <span class="hljs-keyword">if</span>(!maze[nx][ny]&amp;&amp;!v[nx][ny]&amp;&amp;nx&gt;=<span class="hljs-number">0</span>&amp;&amp;nx&lt;n&amp;&amp;ny&gt;=<span class="hljs-number">0</span>&amp;&amp;ny&lt;n)&#123;<span class="hljs-comment">//确保新的点为0，未被访问过，并且不能越界</span><br>                q.push(<span class="hljs-built_in">make_pair</span>(nx,ny));<span class="hljs-comment">//新点入队</span><br>                v[nx][ny]=<span class="hljs-number">1</span>;<span class="hljs-comment">//标记已被访问过</span><br>                pre[nx][ny].prex=now.first;<span class="hljs-comment">//新点的前驱由now发展而来</span><br>                pre[nx][ny].prey=now.second;<br>            &#125;<br>        &#125;<span class="hljs-comment">//每个点的前驱坐标都已求出</span><br>    &#125;<br>    road(n<span class="hljs-number">-1</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="memset"><a href="#memset" class="headerlink" title="memset"></a>memset</h1><p>memset是计算机中C/C++语言初始化函数。作用是将某一块内存中的内容全部设置为指定的值， 这个函数通常为新申请的内存做初始化工作。<br><code>头文件string.h</code><br>**void <em>memset(void <em>s, int ch, size_t n);</em></em></p><blockquote><p>函数解释：将s中当前位置后面的n个字节 （typedef unsigned int size_t ）用 ch 替换并返回 s 。<br>memset：作用是在一段内存块中填充某个给定的值，它是对较大的结构体或数组进行清零操作的一种最快方法 。<br>memset()函数原型是extern void *memset(void *buffer, int c, int count) buffer：为指针或是数组,c：是赋给buffer的值,count：是buffer的长度.</p></blockquote><h1 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h1><h2 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">prime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;   <span class="hljs-comment">//判定一个数是否为素数</span><br>    <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-built_in">sqrt</span>(n);i++)&#123;<br>        <span class="hljs-keyword">if</span>(n%i==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(prime(n)) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Y&quot;</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;N&quot;</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span><br></code></pre></td></tr></table></figure><p>素数筛：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">bool</span> vis[<span class="hljs-number">100005</span>];<br><span class="hljs-keyword">int</span> prime[<span class="hljs-number">100005</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">e_prime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++) vis[i]=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i*i&lt;=n;i++)<br>        <span class="hljs-keyword">if</span>(vis[i])<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i*i;j&lt;=n;j+=i)<br>                vis[j]=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">if</span>(vis[i])<br>            prime[k++]=i;<br>    <span class="hljs-keyword">return</span> k;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">int</span> k=e_prime(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)<br>        <span class="hljs-built_in">cout</span>&lt;&lt;prime[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="GCD-LCM"><a href="#GCD-LCM" class="headerlink" title="GCD LCM"></a>GCD LCM</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;  <span class="hljs-comment">//最大公约数</span><br>    <span class="hljs-keyword">return</span> b==<span class="hljs-number">0</span>?a:gcd(b,a%b);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lcm</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;  <span class="hljs-comment">//最小公倍数</span><br>    <span class="hljs-keyword">return</span> a*b/gcd(a,b);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a,b;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;gcd(a,b)&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;lcm(a,b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="质因素分解"><a href="#质因素分解" class="headerlink" title="质因素分解"></a>质因素分解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> p[<span class="hljs-number">100005</span>],c[<span class="hljs-number">100005</span>];<br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">div</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i*i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(n%i==<span class="hljs-number">0</span>)&#123;<br>            p[++cnt]=i,c[cnt]=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(n%i==<span class="hljs-number">0</span>) n/=i,c[cnt]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(n&gt;<span class="hljs-number">1</span>) p[++cnt]=n,c[cnt]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">int</span> t=div(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=t;i++)<br>        <span class="hljs-built_in">cout</span>&lt;&lt;p[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="扩展欧几里得"><a href="#扩展欧几里得" class="headerlink" title="扩展欧几里得"></a>扩展欧几里得</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">ll <span class="hljs-title">exgcd</span><span class="hljs-params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>) &#123;x=<span class="hljs-number">1</span>,y=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> a;&#125;<br>    ll d=exgcd(b,a%b,x,y);<br>    ll z=x;x=y;y=z-(a/b)*y;<br>    <span class="hljs-keyword">return</span> d;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="lowbit"><a href="#lowbit" class="headerlink" title="lowbit"></a>lowbit</h1><p>lowbit(x)是x的二进制表达式中最低位的1所对应的值。<br>比如，6的二进制是110，所以lowbit(6)=2。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> x&amp;(-x);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="回文数字判断"><a href="#回文数字判断" class="headerlink" title="回文数字判断"></a>回文数字判断</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">huiwen</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> s=n;<br>    <span class="hljs-keyword">while</span>(s!=<span class="hljs-number">0</span>)&#123;<br>        i=i*<span class="hljs-number">10</span>+s%<span class="hljs-number">10</span>;<br>        s/=<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(i==n)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="报错说明"><a href="#报错说明" class="headerlink" title="报错说明"></a>报错说明</h1><p>TLE<br>hdu2010-while() !=没有写 不加”!=EOF”的话只会多最后一个换行，本地IDE检查不出来</p>]]></content>
    
    
    <categories>
      
      <category>C/C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>基础算法</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一条博客动态</title>
    <link href="/1001/"/>
    <url>/1001/</url>
    
    <content type="html"><![CDATA[<p>我的博客今天终于开通啦，欢迎访问！！！<br><a href="https://harrycatt.github.io/">https://harrycatt.github.io/</a></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/cksdbzmd400027cuk1t9fd0y2/"/>
    <url>/cksdbzmd400027cuk1t9fd0y2/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
